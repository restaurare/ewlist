(function(PolymerVis){PolymerVis.monaco=PolymerVis.monaco||{};var MonacoProxy=/*#__PURE__*/function(){"use strict";function MonacoProxy(iframe,editorReference){babelHelpers.classCallCheck(this,MonacoProxy);this._iframe_=iframe;this._editorReference_=editorReference;this.languages.json.jsonDefaults.setDiagnosticsOptions}babelHelpers.createClass(MonacoProxy,[{key:"postMessage",value:function postMessage(msg){msg.editorReference=this._editorReference_;this._iframe_.contentWindow.postMessage(msg,document.location.href)}},{key:"languages",get:function get(){var _this=this;return{json:{jsonDefaults:{setDiagnosticsOptions:function setDiagnosticsOptions(opts){_this.postMessage({path:["monaco","languages","json","jsonDefaults"],event:"setDiagnosticsOptions",args:[opts]})}}}}}},{key:"editor",get:function get(){var _this2=this;return{setModelLanguage:function setModelLanguage(model,language){_this2.postMessage({path:["monaco","editor"],event:"setModelLanguage",args:[null,language]})},layout:function layout(){_this2.postMessage({path:["monaco","editor"],event:"layout",args:[null]})},setTheme:function setTheme(theme){_this2.postMessage({path:["monaco","editor"],event:"setTheme",args:[theme]})},highlightLine:function highlightLine(debugInfo){if(debugInfo){_this2.postMessage({path:["monaco","editor"],event:"highlightLine",args:[debugInfo]})}},removeHighlights:function removeHighlights(){_this2.postMessage({path:["monaco","editor"],event:"removeHighlights",args:[]})},addTypeScriptLibs:function addTypeScriptLibs(libs){_this2.postMessage({path:["monaco","editor"],event:"addLibs",args:[libs]})}}}}]);return MonacoProxy}(),EditorProxy=/*#__PURE__*/function(){"use strict";function EditorProxy(iframe,editorReference){babelHelpers.classCallCheck(this,EditorProxy);this._iframe_=iframe;this._editorReference_=editorReference}babelHelpers.createClass(EditorProxy,[{key:"postMessage",value:function postMessage(msg){msg.editorReference=this._editorReference_;this._iframe_.contentWindow.postMessage(msg,document.location.href)}},{key:"updateOptions",value:function updateOptions(opts){this.postMessage({path:["editor"],event:"updateOptions",args:[opts]})}},{key:"getModel",value:function getModel(){var _this3=this;return{setValue:function setValue(value){_this3.postMessage({path:["editor"],event:"setValue",args:[value]})}}}},{key:"dispose",value:function dispose(){this.postMessage({path:["editor"],event:"dispose",args:[]})}}]);return EditorProxy}(),MonacoIFrame=/*#__PURE__*/function(){"use strict";function MonacoIFrame(root){babelHelpers.classCallCheck(this,MonacoIFrame);this._root_=root;this._iframe_=document.createElement("iframe");this._iframe_.id="monaco-iframe";this._iframe_.scrolling="no";this._root_.appendChild(this._iframe_);this._node_=this.document.createElement("div");this._node_.id="editor";this.document.body.appendChild(this._node_);this._monaco_=new MonacoProxy(this.iframe);this._editor_=new EditorProxy(this.iframe)}babelHelpers.createClass(MonacoIFrame,[{key:"resize",value:function resize(w,h){this.node.style.height=h;this.node.style.width=w}},{key:"insertScriptElement",value:function insertScriptElement(_ref){var src=_ref.src,text=_ref.text,onload=_ref.onload,ele=this.document.createElement("script");if(src)ele.src=src;if(text)ele.text=text;if(onload)ele.onload=onload;this.document.head.appendChild(ele)}},{key:"insertStyle",value:function insertStyle(){var css="#editor {\n        width: 100%;\n        height: 100%;\n      }\n      .debug-red {\n        background : red;\n      }\n      .debug-green {\n        background : green;\n      }\n      html,body {\n        margin : 0px;\n      }",head=this.document.head,style=this.document.createElement("style");style.type="text/css";if(style.styleSheet){style.styleSheet.cssText=css}else{style.appendChild(this.document.createTextNode(css))}head.appendChild(style)}},{key:"init",value:function init(libPath,opts){var _this4=this;this.insertScriptElement({src:"".concat(libPath,"/loader.js"),onload:function onload(){_this4.insertScriptElement({text:_this4.loaderOnLoad(libPath,opts)});_this4.insertStyle()}})}},{key:"loaderOnLoad",value:function loaderOnLoad(libPath){var opts=1<arguments.length&&arguments[1]!==void 0?arguments[1]:{};return"\n            var editorReference = \"".concat(opts.editorReference,"\"\n            var proxy = {};\n            var queue = [];\n            \n            require.config({\n              paths: {vs: \"").concat(libPath,"\"}\n            });\n\n            require(['vs/editor/editor.main'], () => {\n              proxy.monaco = monaco;\n              var div = document.querySelector('#editor')\n              proxy.editor = monaco.editor.create(div, ").concat(JSON.stringify(opts),");\n              monaco.languages.typescript.typescriptDefaults.setCompilerOptions({\n                  target: monaco.languages.typescript.ScriptTarget.ES2017,\n                  allowNonTsExtensions: true,\n                  noLib: true\n              });\n              // [\n              //   {url : 'https://cdn.rawgit.com/Microsoft/TypeScript/64b3086f/lib/lib.es6.d.ts', name : 'es6.d.ts'},\n              //   {url : 'https://cdn.rawgit.com/anandanand84/technicalindicators/235ff767/declarations/generated.d.ts', name : 'Indicators.d.ts', convert : true}\n              // ]\n              proxy.model = proxy.editor.getModel();\n              proxy.model.onDidChangeContent(() => {\n                parent.postMessage({editorReference: editorReference, event: 'value-changed', details: proxy.model.getValue()}, parent.document.location.href);\n              });\n              proxy.editor.onDidFocusEditor(() => {\n                parent.postMessage({editorReference: editorReference, event: 'editor-focused'}, parent.document.location.href);\n              });\n              queue.forEach(e => handler(e));\n              queue = [];\n              parent.postMessage({editorReference: editorReference, ready: true}, parent.document.location.href);\n              resizeHandler();\n            });\n\n            async function loadLibs(libs) {\n                for(let lib of libs) {\n                    var response = await fetch(lib.url)\n                    var types = await response.text();\n                    if(lib.convert)\n                        types = types.replace(new RegExp('default ', 'g'), '').split('export').join('declare');\n                    monaco.languages.typescript.typescriptDefaults.addExtraLib(types, lib.name);\n                    console.log('Added lib ', lib.name);\n                }\n            }\n\n            var resizeHandler = ()=> {\n              if(proxy.editor) {\n                var clientRects = document.body.getClientRects()[0]\n                proxy.editor.layout({width : clientRects.width, height: clientRects.height})\n              }\n            };\n            \n            window.addEventListener('resize', resizeHandler);\n\n            window.addEventListener('message', handler);\n\n            function handler(e) {\n              var {path, event, args} = e.data;\n              var node = path[0];\n              if (!proxy[node]) {\n                queue.push(e);\n                return;\n              }\n              if (event === 'setValue') {\n                proxy.editor.getModel().setValue(args[0]);\n                return;\n              }\n              if(event === 'highlightLine') {\n                proxy.editor.decorationList = [];\n                var debugInfo = args[0];\n                Object.keys(debugInfo).forEach(function (line) {\n                  var lineNo = line - 2;\n                  var status = debugInfo[line] === 0 ? 'debug-red' : 'debug-green';\n                  proxy.editor.decorationList.push({\n                      range: new monaco.Range(lineNo,1,lineNo,1),\n                      options: {\n                        isWholeLine: true,\n                        className: status,\n                      }\n                    });\n                })\n                proxy.editor.lastDecorations = proxy.editor.deltaDecorations([], proxy.editor.decorationList);;\n              }\n              if(event === 'removeHighlights') {\n                if(proxy.editor.lastDecorations && proxy.editor.lastDecorations.length > 1) {\n                  proxy.editor.lastDecorations = proxy.editor.deltaDecorations(proxy.editor.lastDecorations, [{ range: new monaco.Range(1,1,1,1), options : { } }]); \n                }\n              }\n              if(event === 'addLibs') {\n                console.log('loading libs ', args[0])\n                var libs = args[0];\n                loadLibs(libs);\n              }\n              if (event === 'layout') {\n                resizeHandler();\n              }\n              if (event === 'setModelLanguage') {\n                args[0] = proxy.editor.getModel();\n              }\n              try {\n                let cmd = proxy;\n                path.forEach(k => { cmd = cmd[k]; });\n                cmd[event](...args);\n              } catch (err) {\n                console.error(err);\n              }\n            }\n      ")}},{key:"monaco",get:function get(){return this._monaco_}},{key:"editor",get:function get(){return this._editor_}},{key:"root",get:function get(){return this._root_}},{key:"node",get:function get(){return this._node_}},{key:"iframe",get:function get(){return this._iframe_}},{key:"document",get:function get(){return this.iframe.contentWindow.document}},{key:"proxy",get:function get(){return this._proxy_}}]);return MonacoIFrame}();PolymerVis.monaco=PolymerVis.monaco||{};PolymerVis.monaco.MonacoIFrame=MonacoIFrame})(window.PolymerVis=window.PolymerVis||{});